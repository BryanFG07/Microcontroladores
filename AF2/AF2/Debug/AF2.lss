
AF2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000033e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009d4  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000717  00000000  00000000  00000dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000498  00000000  00000000  000014e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000197c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f6  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e1  00000000  00000000  00001de6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000020c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 56 01 	call	0x2ac	; 0x2ac <main>
  78:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_ports>:
    }
}

void init_ports(void){
	//Outputs
	LEDS_DDRX |= (1 << LED1);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	82 60       	ori	r24, 0x02	; 2
  84:	8a b9       	out	0x0a, r24	; 10
	LEDS_DDRX |= (1 << LED2);
  86:	8a b1       	in	r24, 0x0a	; 10
  88:	84 60       	ori	r24, 0x04	; 4
  8a:	8a b9       	out	0x0a, r24	; 10
	LEDS_DDRX |= (1 << LED3);
  8c:	8a b1       	in	r24, 0x0a	; 10
  8e:	88 60       	ori	r24, 0x08	; 8
  90:	8a b9       	out	0x0a, r24	; 10
	LEDS_DDRX |= (1 << LED4);
  92:	8a b1       	in	r24, 0x0a	; 10
  94:	80 61       	ori	r24, 0x10	; 16
  96:	8a b9       	out	0x0a, r24	; 10
	
	//Inputs
	BTNS_DDRX &= ~(1 << BTN0);
  98:	84 b1       	in	r24, 0x04	; 4
  9a:	8e 7f       	andi	r24, 0xFE	; 254
  9c:	84 b9       	out	0x04, r24	; 4
	BTNS_DDRX &= ~(1 << BTN1);
  9e:	84 b1       	in	r24, 0x04	; 4
  a0:	8d 7f       	andi	r24, 0xFD	; 253
  a2:	84 b9       	out	0x04, r24	; 4
  a4:	08 95       	ret

000000a6 <auto_fantastico>:
}
void auto_fantastico(uint8_t num_leds){
	for(uint8_t i=1; i<=num_leds;i++){
  a6:	91 e0       	ldi	r25, 0x01	; 1
  a8:	3a c0       	rjmp	.+116    	; 0x11e <auto_fantastico+0x78>
		if(i!=1){
  aa:	91 30       	cpi	r25, 0x01	; 1
  ac:	81 f0       	breq	.+32     	; 0xce <auto_fantastico+0x28>
			LEDS_PORTX &= ~(1 << (i-1));
  ae:	4b b1       	in	r20, 0x0b	; 11
  b0:	69 2f       	mov	r22, r25
  b2:	70 e0       	ldi	r23, 0x00	; 0
  b4:	61 50       	subi	r22, 0x01	; 1
  b6:	71 09       	sbc	r23, r1
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <auto_fantastico+0x1c>
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <auto_fantastico+0x18>
  c6:	20 95       	com	r18
  c8:	24 23       	and	r18, r20
  ca:	2b b9       	out	0x0b, r18	; 11
  cc:	0f c0       	rjmp	.+30     	; 0xec <auto_fantastico+0x46>
			}else{
			LEDS_PORTX &= ~(1 << (i+1));
  ce:	4b b1       	in	r20, 0x0b	; 11
  d0:	69 2f       	mov	r22, r25
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	6f 5f       	subi	r22, 0xFF	; 255
  d6:	7f 4f       	sbci	r23, 0xFF	; 255
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <auto_fantastico+0x3c>
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <auto_fantastico+0x38>
  e6:	20 95       	com	r18
  e8:	24 23       	and	r18, r20
  ea:	2b b9       	out	0x0b, r18	; 11
		}
		//LEDS_PORTX &= 0b11100001;
		LEDS_PORTX |= (1 << i);
  ec:	4b b1       	in	r20, 0x0b	; 11
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	09 2e       	mov	r0, r25
  f4:	02 c0       	rjmp	.+4      	; 0xfa <auto_fantastico+0x54>
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <auto_fantastico+0x50>
  fe:	24 2b       	or	r18, r20
 100:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	39 e6       	ldi	r19, 0x69	; 105
 106:	48 e1       	ldi	r20, 0x18	; 24
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	30 40       	sbci	r19, 0x00	; 0
 10c:	40 40       	sbci	r20, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <auto_fantastico+0x62>
 110:	00 c0       	rjmp	.+0      	; 0x112 <auto_fantastico+0x6c>
 112:	00 00       	nop
		_delay_ms(RETARDO);
		if(!(!(BTN0_READ) &&  !(BTN1_READ))){
 114:	18 99       	sbic	0x03, 0	; 3
 116:	05 c0       	rjmp	.+10     	; 0x122 <auto_fantastico+0x7c>
 118:	19 99       	sbic	0x03, 1	; 3
 11a:	03 c0       	rjmp	.+6      	; 0x122 <auto_fantastico+0x7c>
	//Inputs
	BTNS_DDRX &= ~(1 << BTN0);
	BTNS_DDRX &= ~(1 << BTN1);
}
void auto_fantastico(uint8_t num_leds){
	for(uint8_t i=1; i<=num_leds;i++){
 11c:	9f 5f       	subi	r25, 0xFF	; 255
 11e:	89 17       	cp	r24, r25
 120:	20 f6       	brcc	.-120    	; 0xaa <auto_fantastico+0x4>
		if(!(!(BTN0_READ) &&  !(BTN1_READ))){
			break;
		}
		
	}
	for(uint8_t i=num_leds-1;i>1;i--){
 122:	81 50       	subi	r24, 0x01	; 1
 124:	28 c0       	rjmp	.+80     	; 0x176 <auto_fantastico+0xd0>
		LEDS_PORTX &= ~(1 << (i+1));
 126:	4b b1       	in	r20, 0x0b	; 11
 128:	68 2f       	mov	r22, r24
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	6f 5f       	subi	r22, 0xFF	; 255
 12e:	7f 4f       	sbci	r23, 0xFF	; 255
 130:	21 e0       	ldi	r18, 0x01	; 1
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	f9 01       	movw	r30, r18
 136:	02 c0       	rjmp	.+4      	; 0x13c <auto_fantastico+0x96>
 138:	ee 0f       	add	r30, r30
 13a:	ff 1f       	adc	r31, r31
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <auto_fantastico+0x92>
 140:	9e 2f       	mov	r25, r30
 142:	90 95       	com	r25
 144:	94 23       	and	r25, r20
 146:	9b b9       	out	0x0b, r25	; 11
		LEDS_PORTX |= (1 << i);
 148:	9b b1       	in	r25, 0x0b	; 11
 14a:	08 2e       	mov	r0, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <auto_fantastico+0xac>
 14e:	22 0f       	add	r18, r18
 150:	33 1f       	adc	r19, r19
 152:	0a 94       	dec	r0
 154:	e2 f7       	brpl	.-8      	; 0x14e <auto_fantastico+0xa8>
 156:	29 2b       	or	r18, r25
 158:	2b b9       	out	0x0b, r18	; 11
 15a:	ff ef       	ldi	r31, 0xFF	; 255
 15c:	29 e6       	ldi	r18, 0x69	; 105
 15e:	38 e1       	ldi	r19, 0x18	; 24
 160:	f1 50       	subi	r31, 0x01	; 1
 162:	20 40       	sbci	r18, 0x00	; 0
 164:	30 40       	sbci	r19, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <auto_fantastico+0xba>
 168:	00 c0       	rjmp	.+0      	; 0x16a <auto_fantastico+0xc4>
 16a:	00 00       	nop
		_delay_ms(RETARDO);
		if(!(!(BTN0_READ) &&  !(BTN1_READ))){
 16c:	18 99       	sbic	0x03, 0	; 3
 16e:	05 c0       	rjmp	.+10     	; 0x17a <auto_fantastico+0xd4>
 170:	19 99       	sbic	0x03, 1	; 3
 172:	03 c0       	rjmp	.+6      	; 0x17a <auto_fantastico+0xd4>
		if(!(!(BTN0_READ) &&  !(BTN1_READ))){
			break;
		}
		
	}
	for(uint8_t i=num_leds-1;i>1;i--){
 174:	81 50       	subi	r24, 0x01	; 1
 176:	82 30       	cpi	r24, 0x02	; 2
 178:	b0 f6       	brcc	.-84     	; 0x126 <auto_fantastico+0x80>
 17a:	08 95       	ret

0000017c <apagar_leds>:
		}
	}
}

void apagar_leds(uint8_t num_leds) {
	for (uint8_t i=1; i<num_leds+1;i++){
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0d c0       	rjmp	.+26     	; 0x19a <apagar_leds+0x1e>
		LEDS_PORTX &= ~(1 << i);
 180:	4b b1       	in	r20, 0x0b	; 11
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	09 2e       	mov	r0, r25
 188:	02 c0       	rjmp	.+4      	; 0x18e <apagar_leds+0x12>
 18a:	22 0f       	add	r18, r18
 18c:	33 1f       	adc	r19, r19
 18e:	0a 94       	dec	r0
 190:	e2 f7       	brpl	.-8      	; 0x18a <apagar_leds+0xe>
 192:	20 95       	com	r18
 194:	24 23       	and	r18, r20
 196:	2b b9       	out	0x0b, r18	; 11
		}
	}
}

void apagar_leds(uint8_t num_leds) {
	for (uint8_t i=1; i<num_leds+1;i++){
 198:	9f 5f       	subi	r25, 0xFF	; 255
 19a:	49 2f       	mov	r20, r25
 19c:	50 e0       	ldi	r21, 0x00	; 0
 19e:	28 2f       	mov	r18, r24
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	2f 5f       	subi	r18, 0xFF	; 255
 1a4:	3f 4f       	sbci	r19, 0xFF	; 255
 1a6:	42 17       	cp	r20, r18
 1a8:	53 07       	cpc	r21, r19
 1aa:	54 f3       	brlt	.-44     	; 0x180 <apagar_leds+0x4>
		LEDS_PORTX &= ~(1 << i);
	}
}
 1ac:	08 95       	ret

000001ae <secuencia_libre>:

void secuencia_libre(void){
	LEDS_PORTX |= (1 << LED1);
 1ae:	8b b1       	in	r24, 0x0b	; 11
 1b0:	82 60       	ori	r24, 0x02	; 2
 1b2:	8b b9       	out	0x0b, r24	; 11
	LEDS_PORTX |= (1 << LED2);
 1b4:	8b b1       	in	r24, 0x0b	; 11
 1b6:	84 60       	ori	r24, 0x04	; 4
 1b8:	8b b9       	out	0x0b, r24	; 11
 1ba:	2f ef       	ldi	r18, 0xFF	; 255
 1bc:	83 ec       	ldi	r24, 0xC3	; 195
 1be:	99 e0       	ldi	r25, 0x09	; 9
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <secuencia_libre+0x12>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <secuencia_libre+0x1c>
 1ca:	00 00       	nop
	_delay_ms(RETARDO2);
	LEDS_PORTX &= ~(1 << LED1);
 1cc:	8b b1       	in	r24, 0x0b	; 11
 1ce:	8d 7f       	andi	r24, 0xFD	; 253
 1d0:	8b b9       	out	0x0b, r24	; 11
	LEDS_PORTX &= ~(1 << LED2);
 1d2:	8b b1       	in	r24, 0x0b	; 11
 1d4:	8b 7f       	andi	r24, 0xFB	; 251
 1d6:	8b b9       	out	0x0b, r24	; 11
 1d8:	2f ef       	ldi	r18, 0xFF	; 255
 1da:	83 ec       	ldi	r24, 0xC3	; 195
 1dc:	99 e0       	ldi	r25, 0x09	; 9
 1de:	21 50       	subi	r18, 0x01	; 1
 1e0:	80 40       	sbci	r24, 0x00	; 0
 1e2:	90 40       	sbci	r25, 0x00	; 0
 1e4:	e1 f7       	brne	.-8      	; 0x1de <secuencia_libre+0x30>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <secuencia_libre+0x3a>
 1e8:	00 00       	nop
	_delay_ms(RETARDO2);
	LEDS_PORTX |= (1 << LED1);
 1ea:	8b b1       	in	r24, 0x0b	; 11
 1ec:	82 60       	ori	r24, 0x02	; 2
 1ee:	8b b9       	out	0x0b, r24	; 11
	LEDS_PORTX |= (1 << LED2);
 1f0:	8b b1       	in	r24, 0x0b	; 11
 1f2:	84 60       	ori	r24, 0x04	; 4
 1f4:	8b b9       	out	0x0b, r24	; 11
 1f6:	2f ef       	ldi	r18, 0xFF	; 255
 1f8:	83 ec       	ldi	r24, 0xC3	; 195
 1fa:	99 e0       	ldi	r25, 0x09	; 9
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	90 40       	sbci	r25, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <secuencia_libre+0x4e>
 204:	00 c0       	rjmp	.+0      	; 0x206 <secuencia_libre+0x58>
 206:	00 00       	nop
	_delay_ms(RETARDO2);
	LEDS_PORTX &= ~(1 << LED1);
 208:	8b b1       	in	r24, 0x0b	; 11
 20a:	8d 7f       	andi	r24, 0xFD	; 253
 20c:	8b b9       	out	0x0b, r24	; 11
	LEDS_PORTX &= ~(1 << LED2);
 20e:	8b b1       	in	r24, 0x0b	; 11
 210:	8b 7f       	andi	r24, 0xFB	; 251
 212:	8b b9       	out	0x0b, r24	; 11
	LEDS_PORTX |= (1 << LED3);
 214:	8b b1       	in	r24, 0x0b	; 11
 216:	88 60       	ori	r24, 0x08	; 8
 218:	8b b9       	out	0x0b, r24	; 11
	LEDS_PORTX |= (1 << LED4);
 21a:	8b b1       	in	r24, 0x0b	; 11
 21c:	80 61       	ori	r24, 0x10	; 16
 21e:	8b b9       	out	0x0b, r24	; 11
 220:	2f ef       	ldi	r18, 0xFF	; 255
 222:	83 ec       	ldi	r24, 0xC3	; 195
 224:	99 e0       	ldi	r25, 0x09	; 9
 226:	21 50       	subi	r18, 0x01	; 1
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	90 40       	sbci	r25, 0x00	; 0
 22c:	e1 f7       	brne	.-8      	; 0x226 <secuencia_libre+0x78>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <secuencia_libre+0x82>
 230:	00 00       	nop
	_delay_ms(RETARDO2);
	LEDS_PORTX &= ~(1 << LED3);
 232:	8b b1       	in	r24, 0x0b	; 11
 234:	87 7f       	andi	r24, 0xF7	; 247
 236:	8b b9       	out	0x0b, r24	; 11
	LEDS_PORTX &= ~(1 << LED4);
 238:	8b b1       	in	r24, 0x0b	; 11
 23a:	8f 7e       	andi	r24, 0xEF	; 239
 23c:	8b b9       	out	0x0b, r24	; 11
 23e:	2f ef       	ldi	r18, 0xFF	; 255
 240:	83 ec       	ldi	r24, 0xC3	; 195
 242:	99 e0       	ldi	r25, 0x09	; 9
 244:	21 50       	subi	r18, 0x01	; 1
 246:	80 40       	sbci	r24, 0x00	; 0
 248:	90 40       	sbci	r25, 0x00	; 0
 24a:	e1 f7       	brne	.-8      	; 0x244 <secuencia_libre+0x96>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <secuencia_libre+0xa0>
 24e:	00 00       	nop
	_delay_ms(RETARDO2);
	LEDS_PORTX |= (1 << LED3);
 250:	8b b1       	in	r24, 0x0b	; 11
 252:	88 60       	ori	r24, 0x08	; 8
 254:	8b b9       	out	0x0b, r24	; 11
	LEDS_PORTX |= (1 << LED4);
 256:	8b b1       	in	r24, 0x0b	; 11
 258:	80 61       	ori	r24, 0x10	; 16
 25a:	8b b9       	out	0x0b, r24	; 11
 25c:	2f ef       	ldi	r18, 0xFF	; 255
 25e:	83 ec       	ldi	r24, 0xC3	; 195
 260:	99 e0       	ldi	r25, 0x09	; 9
 262:	21 50       	subi	r18, 0x01	; 1
 264:	80 40       	sbci	r24, 0x00	; 0
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <secuencia_libre+0xb4>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <secuencia_libre+0xbe>
 26c:	00 00       	nop
	_delay_ms(RETARDO2);
	LEDS_PORTX &= ~(1 << LED3);
 26e:	8b b1       	in	r24, 0x0b	; 11
 270:	87 7f       	andi	r24, 0xF7	; 247
 272:	8b b9       	out	0x0b, r24	; 11
	LEDS_PORTX &= ~(1 << LED4);
 274:	8b b1       	in	r24, 0x0b	; 11
 276:	8f 7e       	andi	r24, 0xEF	; 239
 278:	8b b9       	out	0x0b, r24	; 11
 27a:	08 95       	ret

0000027c <encender_leds>:
}

void encender_leds(uint8_t num_leds) {
	for (uint8_t i=1; i<num_leds+1;i++){
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0c c0       	rjmp	.+24     	; 0x298 <encender_leds+0x1c>
		LEDS_PORTX |= (1 << i);
 280:	4b b1       	in	r20, 0x0b	; 11
 282:	21 e0       	ldi	r18, 0x01	; 1
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	09 2e       	mov	r0, r25
 288:	02 c0       	rjmp	.+4      	; 0x28e <encender_leds+0x12>
 28a:	22 0f       	add	r18, r18
 28c:	33 1f       	adc	r19, r19
 28e:	0a 94       	dec	r0
 290:	e2 f7       	brpl	.-8      	; 0x28a <encender_leds+0xe>
 292:	24 2b       	or	r18, r20
 294:	2b b9       	out	0x0b, r18	; 11
	LEDS_PORTX &= ~(1 << LED3);
	LEDS_PORTX &= ~(1 << LED4);
}

void encender_leds(uint8_t num_leds) {
	for (uint8_t i=1; i<num_leds+1;i++){
 296:	9f 5f       	subi	r25, 0xFF	; 255
 298:	49 2f       	mov	r20, r25
 29a:	50 e0       	ldi	r21, 0x00	; 0
 29c:	28 2f       	mov	r18, r24
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	2f 5f       	subi	r18, 0xFF	; 255
 2a2:	3f 4f       	sbci	r19, 0xFF	; 255
 2a4:	42 17       	cp	r20, r18
 2a6:	53 07       	cpc	r21, r19
 2a8:	5c f3       	brlt	.-42     	; 0x280 <encender_leds+0x4>
		LEDS_PORTX |= (1 << i);
	}
}
 2aa:	08 95       	ret

000002ac <main>:
void secuencia_libre(void);
void encender_leds(uint8_t);

int main(void)
{
	init_ports();
 2ac:	0e 94 40 00 	call	0x80	; 0x80 <init_ports>
    while (1) 
    {
		if(!(BTN0_READ) &&  !(BTN1_READ)){
 2b0:	18 99       	sbic	0x03, 0	; 3
 2b2:	06 c0       	rjmp	.+12     	; 0x2c0 <main+0x14>
 2b4:	19 99       	sbic	0x03, 1	; 3
 2b6:	04 c0       	rjmp	.+8      	; 0x2c0 <main+0x14>
			auto_fantastico(NUM_LEDS);
 2b8:	84 e0       	ldi	r24, 0x04	; 4
 2ba:	0e 94 53 00 	call	0xa6	; 0xa6 <auto_fantastico>
 2be:	f8 cf       	rjmp	.-16     	; 0x2b0 <main+0x4>
			
		}else if(!(BTN0_READ) && (BTN1_READ)){	
 2c0:	18 99       	sbic	0x03, 0	; 3
 2c2:	06 c0       	rjmp	.+12     	; 0x2d0 <main+0x24>
 2c4:	19 9b       	sbis	0x03, 1	; 3
 2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <main+0x24>
			apagar_leds(NUM_LEDS);
 2c8:	84 e0       	ldi	r24, 0x04	; 4
 2ca:	0e 94 be 00 	call	0x17c	; 0x17c <apagar_leds>
 2ce:	f0 cf       	rjmp	.-32     	; 0x2b0 <main+0x4>
			
		}else if((BTN0_READ) && !(BTN1_READ)){
 2d0:	18 9b       	sbis	0x03, 0	; 3
 2d2:	05 c0       	rjmp	.+10     	; 0x2de <main+0x32>
 2d4:	19 99       	sbic	0x03, 1	; 3
 2d6:	03 c0       	rjmp	.+6      	; 0x2de <main+0x32>
			secuencia_libre();
 2d8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <secuencia_libre>
 2dc:	e9 cf       	rjmp	.-46     	; 0x2b0 <main+0x4>
		}else{		
			encender_leds(NUM_LEDS);	
 2de:	84 e0       	ldi	r24, 0x04	; 4
 2e0:	0e 94 3e 01 	call	0x27c	; 0x27c <encender_leds>
 2e4:	e5 cf       	rjmp	.-54     	; 0x2b0 <main+0x4>

000002e6 <_exit>:
 2e6:	f8 94       	cli

000002e8 <__stop_program>:
 2e8:	ff cf       	rjmp	.-2      	; 0x2e8 <__stop_program>
